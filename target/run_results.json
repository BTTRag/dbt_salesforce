{"results": [{"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('stg_salesforce_account'), column_name='account_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "not_null_stg_salesforce_account_account_id"], "unique_id": "test.salesforce.not_null_stg_salesforce_account_account_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/not_null_stg_salesforce_account_account_id.sql", "original_file_path": "models/base/schema.yml", "name": "not_null_stg_salesforce_account_account_id", "resource_type": "test", "alias": "not_null_stg_salesforce_account_account_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.salesforce.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/not_null_stg_salesforce_account_account_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom __dbt__CTE__stg_salesforce_account\nwhere account_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_account", "sql": " __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_account\nwhere account_id is null\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_account\nwhere account_id is null\n\n", "column_name": "account_id", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_id"}}}, "error": null, "status": null, "execution_time": 0.046365976333618164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.239112Z", "completed_at": "2020-05-05T23:24:19.267752Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.268437Z", "completed_at": "2020-05-05T23:24:19.268444Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('stg_salesforce_account'), column_name='account_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "unique_stg_salesforce_account_account_id"], "unique_id": "test.salesforce.unique_stg_salesforce_account_account_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/unique_stg_salesforce_account_account_id.sql", "original_file_path": "models/base/schema.yml", "name": "unique_stg_salesforce_account_account_id", "resource_type": "test", "alias": "unique_stg_salesforce_account_account_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.salesforce.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/unique_stg_salesforce_account_account_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        account_id\n\n    from __dbt__CTE__stg_salesforce_account\n    where account_id is not null\n    group by account_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_account", "sql": " __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        account_id\n\n    from __dbt__CTE__stg_salesforce_account\n    where account_id is not null\n    group by account_id\n    having count(*) > 1\n\n) validation_errors\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        account_id\n\n    from __dbt__CTE__stg_salesforce_account\n    where account_id is not null\n    group by account_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "account_id", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "account_id"}}}, "error": null, "status": null, "execution_time": 0.049241065979003906, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.252428Z", "completed_at": "2020-05-05T23:24:19.268631Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.286939Z", "completed_at": "2020-05-05T23:24:19.286944Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('stg_salesforce_opportunity'), column_name='opportunity_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "unique_stg_salesforce_opportunity_opportunity_id"], "unique_id": "test.salesforce.unique_stg_salesforce_opportunity_opportunity_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/unique_stg_salesforce_opportunity_opportunity_id.sql", "original_file_path": "models/base/schema.yml", "name": "unique_stg_salesforce_opportunity_opportunity_id", "resource_type": "test", "alias": "unique_stg_salesforce_opportunity_opportunity_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.salesforce.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/unique_stg_salesforce_opportunity_opportunity_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        opportunity_id\n\n    from __dbt__CTE__stg_salesforce_opportunity\n    where opportunity_id is not null\n    group by opportunity_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_opportunity", "sql": " __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        opportunity_id\n\n    from __dbt__CTE__stg_salesforce_opportunity\n    where opportunity_id is not null\n    group by opportunity_id\n    having count(*) > 1\n\n) validation_errors\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        opportunity_id\n\n    from __dbt__CTE__stg_salesforce_opportunity\n    where opportunity_id is not null\n    group by opportunity_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "opportunity_id", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "opportunity_id"}}}, "error": null, "status": null, "execution_time": 0.03290104866027832, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.268240Z", "completed_at": "2020-05-05T23:24:19.288061Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.288639Z", "completed_at": "2020-05-05T23:24:19.288643Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('stg_salesforce_opportunity'), column_name='opportunity_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "not_null_stg_salesforce_opportunity_opportunity_id"], "unique_id": "test.salesforce.not_null_stg_salesforce_opportunity_opportunity_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/not_null_stg_salesforce_opportunity_opportunity_id.sql", "original_file_path": "models/base/schema.yml", "name": "not_null_stg_salesforce_opportunity_opportunity_id", "resource_type": "test", "alias": "not_null_stg_salesforce_opportunity_opportunity_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_opportunity"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.salesforce.stg_salesforce_opportunity"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/not_null_stg_salesforce_opportunity_opportunity_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom __dbt__CTE__stg_salesforce_opportunity\nwhere opportunity_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_opportunity", "sql": " __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_opportunity\nwhere opportunity_id is null\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_opportunity\nwhere opportunity_id is null\n\n", "column_name": "opportunity_id", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "opportunity_id"}}}, "error": null, "status": null, "execution_time": 0.03340506553649902, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.268069Z", "completed_at": "2020-05-05T23:24:19.288226Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.288840Z", "completed_at": "2020-05-05T23:24:19.288844Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with opportunity as (\n    \n    select *\n    from {{ ref('stg_salesforce_opportunity') }}\n\n), user as (\n\n    select *\n    from {{ ref('stg_salesforce_user') }}\n  \n), account as (\n\n    select *\n    from {{ ref('stg_salesforce_account') }}\n  \n), add_fields as (\n\n    select \n      opportunity.* ,\n      account.*,\n      opportunity_owner.user_id as opportunity_owner_id,\n      opportunity_owner.name as opportunity_owner_name,\n      opportunity_owner.city opportunity_owner_city,\n      opportunity_owner.state as opportunity_owner_state,\n      opportunity_manager.user_id as opportunity_manager_id,\n      opportunity_manager.name as opportunity_manager_name,\n      opportunity_manager.city opportunity_manager_city,\n      opportunity_manager.state as opportunity_manager_state,\n      case\n        when opportunity.is_won then 'Won'\n        when not opportunity.is_won and opportunity.is_closed then 'Lost'\n        when not opportunity.is_closed and lower(opportunity.forecast_category) in ('pipeline','forecast','bestcase') then 'Pipeline'\n        else 'Other'\n      end as status,\n      case when is_created_this_month then amount else 0 end as created_amount_this_month,\n      case when is_created_this_quarter then amount else 0 end as created_amount_this_quarter,\n      case when is_created_this_month then 1 else 0 end as created_count_this_month,\n      case when is_created_this_quarter then 1 else 0 end as created_count_this_quarter,\n      case when is_closed_this_month then amount else 0 end as closed_amount_this_month,\n      case when is_closed_this_quarter then amount else 0 end as closed_amount_this_quarter,\n      case when is_closed_this_month then 1 else 0 end as closed_count_this_month,\n      case when is_closed_this_quarter then 1 else 0 end as closed_count_this_quarter\n      \n    from opportunity\n    left join account on opportunity.opportunity_account_id = account.account_id\n    left join user as opportunity_owner on opportunity.owner_id = opportunity_owner.user_id\n    left join user as opportunity_manager on opportunity_owner.manager_id = opportunity_manager.user_id\n)\n\nselect *\nfrom add_fields", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "salesforce_opportunity_enhanced"], "unique_id": "model.salesforce.salesforce_opportunity_enhanced", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "salesforce_opportunity_enhanced.sql", "original_file_path": "models/salesforce_opportunity_enhanced.sql", "name": "salesforce_opportunity_enhanced", "resource_type": "model", "alias": "salesforce_opportunity_enhanced", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_salesforce_opportunity"], ["stg_salesforce_user"], ["stg_salesforce_account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.salesforce.stg_salesforce_opportunity", "model.salesforce.stg_salesforce_user", "model.salesforce.stg_salesforce_account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/salesforce_opportunity_enhanced.sql", "compiled": true, "compiled_sql": "with opportunity as (\n    \n    select *\n    from __dbt__CTE__stg_salesforce_opportunity\n\n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), account as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_account\n  \n), add_fields as (\n\n    select \n      opportunity.* ,\n      account.*,\n      opportunity_owner.user_id as opportunity_owner_id,\n      opportunity_owner.name as opportunity_owner_name,\n      opportunity_owner.city opportunity_owner_city,\n      opportunity_owner.state as opportunity_owner_state,\n      opportunity_manager.user_id as opportunity_manager_id,\n      opportunity_manager.name as opportunity_manager_name,\n      opportunity_manager.city opportunity_manager_city,\n      opportunity_manager.state as opportunity_manager_state,\n      case\n        when opportunity.is_won then 'Won'\n        when not opportunity.is_won and opportunity.is_closed then 'Lost'\n        when not opportunity.is_closed and lower(opportunity.forecast_category) in ('pipeline','forecast','bestcase') then 'Pipeline'\n        else 'Other'\n      end as status,\n      case when is_created_this_month then amount else 0 end as created_amount_this_month,\n      case when is_created_this_quarter then amount else 0 end as created_amount_this_quarter,\n      case when is_created_this_month then 1 else 0 end as created_count_this_month,\n      case when is_created_this_quarter then 1 else 0 end as created_count_this_quarter,\n      case when is_closed_this_month then amount else 0 end as closed_amount_this_month,\n      case when is_closed_this_quarter then amount else 0 end as closed_amount_this_quarter,\n      case when is_closed_this_month then 1 else 0 end as closed_count_this_month,\n      case when is_closed_this_quarter then 1 else 0 end as closed_count_this_quarter\n      \n    from opportunity\n    left join account on opportunity.opportunity_account_id = account.account_id\n    left join user as opportunity_owner on opportunity.owner_id = opportunity_owner.user_id\n    left join user as opportunity_manager on opportunity_owner.manager_id = opportunity_manager.user_id\n)\n\nselect *\nfrom add_fields", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_opportunity", "sql": " __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.salesforce.stg_salesforce_user", "sql": " __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.salesforce.stg_salesforce_account", "sql": " __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "with  __dbt__CTE__stg_salesforce_opportunity as (\nwith base as (\n\n    select *\n    from salesforce.opportunity\n    where not is_deleted\n\n), fields as (\n\n    select \n\n        id as opportunity_id,\n        account_id as opportunity_account_id,\n        amount,\n        probability,\n        created_date, \n        is_won,\n        is_closed,\n        forecast_category,\n        stage_name,\n        owner_id,\n        close_date,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_created_this_month,\n        created_date >= \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_created_this_quarter,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(\n    current_timestamp\n as datetime),\n        day\n    )\n\n\n as days_since_created,\n        \n  \n\n    datetime_diff(\n        cast(created_date as datetime),\n        cast(close_date as datetime),\n        day\n    )\n\n\n as days_to_close,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        month\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        month\n    )\n\n as is_closed_this_month,\n        \n    timestamp_trunc(\n        cast(close_date as timestamp),\n        quarter\n    )\n\n = \n    timestamp_trunc(\n        cast(\n    current_timestamp\n as timestamp),\n        quarter\n    )\n\n as is_closed_this_quarter\n\n    from base\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__stg_salesforce_account as (\nwith base as (\n\n    select *\n    from salesforce.account\n    where not is_deleted\n\n), fields as (\n\n    select \n\n      id as account_id,\n      name as account_name,\n      industry,\n      number_of_employees,\n      account_source,\n      rating as account_rating,\n      annual_revenue\n\n    from base\n\n)\n\nselect *\nfrom fields\n),opportunity as (\n    \n    select *\n    from __dbt__CTE__stg_salesforce_opportunity\n\n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), account as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_account\n  \n), add_fields as (\n\n    select \n      opportunity.* ,\n      account.*,\n      opportunity_owner.user_id as opportunity_owner_id,\n      opportunity_owner.name as opportunity_owner_name,\n      opportunity_owner.city opportunity_owner_city,\n      opportunity_owner.state as opportunity_owner_state,\n      opportunity_manager.user_id as opportunity_manager_id,\n      opportunity_manager.name as opportunity_manager_name,\n      opportunity_manager.city opportunity_manager_city,\n      opportunity_manager.state as opportunity_manager_state,\n      case\n        when opportunity.is_won then 'Won'\n        when not opportunity.is_won and opportunity.is_closed then 'Lost'\n        when not opportunity.is_closed and lower(opportunity.forecast_category) in ('pipeline','forecast','bestcase') then 'Pipeline'\n        else 'Other'\n      end as status,\n      case when is_created_this_month then amount else 0 end as created_amount_this_month,\n      case when is_created_this_quarter then amount else 0 end as created_amount_this_quarter,\n      case when is_created_this_month then 1 else 0 end as created_count_this_month,\n      case when is_created_this_quarter then 1 else 0 end as created_count_this_quarter,\n      case when is_closed_this_month then amount else 0 end as closed_amount_this_month,\n      case when is_closed_this_quarter then amount else 0 end as closed_amount_this_quarter,\n      case when is_closed_this_month then 1 else 0 end as closed_count_this_month,\n      case when is_closed_this_quarter then 1 else 0 end as closed_count_this_quarter\n      \n    from opportunity\n    left join account on opportunity.opportunity_account_id = account.account_id\n    left join user as opportunity_owner on opportunity.owner_id = opportunity_owner.user_id\n    left join user as opportunity_manager on opportunity_owner.manager_id = opportunity_manager.user_id\n)\n\nselect *\nfrom add_fields", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.036451101303100586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.289228Z", "completed_at": "2020-05-05T23:24:19.321207Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.323443Z", "completed_at": "2020-05-05T23:24:19.323448Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('stg_salesforce_user_role'), column_name='user_role_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "not_null_stg_salesforce_user_role_user_role_id"], "unique_id": "test.salesforce.not_null_stg_salesforce_user_role_user_role_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/not_null_stg_salesforce_user_role_user_role_id.sql", "original_file_path": "models/base/schema.yml", "name": "not_null_stg_salesforce_user_role_user_role_id", "resource_type": "test", "alias": "not_null_stg_salesforce_user_role_user_role_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_user_role"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.salesforce.stg_salesforce_user_role"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/not_null_stg_salesforce_user_role_user_role_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom __dbt__CTE__stg_salesforce_user_role\nwhere user_role_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_user_role", "sql": " __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_user_role\nwhere user_role_id is null\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_user_role\nwhere user_role_id is null\n\n", "column_name": "user_role_id", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_role_id"}}}, "error": null, "status": null, "execution_time": 0.05213499069213867, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.314767Z", "completed_at": "2020-05-05T23:24:19.323962Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.338238Z", "completed_at": "2020-05-05T23:24:19.338242Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('stg_salesforce_user'), column_name='user_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "not_null_stg_salesforce_user_user_id"], "unique_id": "test.salesforce.not_null_stg_salesforce_user_user_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/not_null_stg_salesforce_user_user_id.sql", "original_file_path": "models/base/schema.yml", "name": "not_null_stg_salesforce_user_user_id", "resource_type": "test", "alias": "not_null_stg_salesforce_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.salesforce.stg_salesforce_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/not_null_stg_salesforce_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom __dbt__CTE__stg_salesforce_user\nwhere user_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_user", "sql": " __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_user\nwhere user_id is null\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom __dbt__CTE__stg_salesforce_user\nwhere user_id is null\n\n", "column_name": "user_id", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id"}}}, "error": null, "status": null, "execution_time": 0.028217077255249023, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.323632Z", "completed_at": "2020-05-05T23:24:19.341448Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.342291Z", "completed_at": "2020-05-05T23:24:19.342295Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('stg_salesforce_user_role'), column_name='user_role_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "unique_stg_salesforce_user_role_user_role_id"], "unique_id": "test.salesforce.unique_stg_salesforce_user_role_user_role_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/unique_stg_salesforce_user_role_user_role_id.sql", "original_file_path": "models/base/schema.yml", "name": "unique_stg_salesforce_user_role_user_role_id", "resource_type": "test", "alias": "unique_stg_salesforce_user_role_user_role_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_user_role"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.salesforce.stg_salesforce_user_role"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/unique_stg_salesforce_user_role_user_role_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        user_role_id\n\n    from __dbt__CTE__stg_salesforce_user_role\n    where user_role_id is not null\n    group by user_role_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_user_role", "sql": " __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        user_role_id\n\n    from __dbt__CTE__stg_salesforce_user_role\n    where user_role_id is not null\n    group by user_role_id\n    having count(*) > 1\n\n) validation_errors\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        user_role_id\n\n    from __dbt__CTE__stg_salesforce_user_role\n    where user_role_id is not null\n    group by user_role_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_role_id", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_role_id"}}}, "error": null, "status": null, "execution_time": 0.02828383445739746, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.323808Z", "completed_at": "2020-05-05T23:24:19.342097Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.342830Z", "completed_at": "2020-05-05T23:24:19.342833Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('stg_salesforce_user'), column_name='user_id') }}", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "schema_test", "unique_stg_salesforce_user_user_id"], "unique_id": "test.salesforce.unique_stg_salesforce_user_user_id", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "schema_test/unique_stg_salesforce_user_user_id.sql", "original_file_path": "models/base/schema.yml", "name": "unique_stg_salesforce_user_user_id", "resource_type": "test", "alias": "unique_stg_salesforce_user_user_id", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_salesforce_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.salesforce.stg_salesforce_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/schema_test/unique_stg_salesforce_user_user_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*)\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__stg_salesforce_user\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_user", "sql": " __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__stg_salesforce_user\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "wrapped_sql": "\n\n\n\nwith __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)select count(*)\nfrom (\n\n    select\n        user_id\n\n    from __dbt__CTE__stg_salesforce_user\n    where user_id is not null\n    group by user_id\n    having count(*) > 1\n\n) validation_errors\n\n", "column_name": "user_id", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id"}}}, "error": null, "status": null, "execution_time": 0.08575105667114258, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.343243Z", "completed_at": "2020-05-05T23:24:19.426470Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.426997Z", "completed_at": "2020-05-05T23:24:19.427006Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with salesforce_opportunity_enhanced as (\n    \n    select *\n    from {{ ref('salesforce_opportunity_enhanced') }}\n\n), pipeline as (\n\n  select \n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n\n), bookings as (\n\n  select \n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n\n), lost as (\n\n  select \n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n\n)\n\nselect \n  bookings.*,\n  pipeline.*,\n  lost.*,\n  round((bookings.bookings_amount_closed_this_month / (bookings.bookings_amount_closed_this_month + lost.lost_amount_this_month)) * 100, 2 ) as win_percent_this_month,\n  round((bookings.bookings_amount_closed_this_quarter / (bookings.bookings_amount_closed_this_quarter + lost.lost_amount_this_quarter)) * 100, 2 ) as win_percent_this_quarter,\n  round((bookings.total_bookings_amount / (bookings.total_bookings_amount + lost.total_lost_amount)) * 100, 2) as win_percent_all_time\nfrom bookings, pipeline, lost", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "salesforce_sales_snapshot"], "unique_id": "model.salesforce.salesforce_sales_snapshot", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "salesforce_sales_snapshot.sql", "original_file_path": "models/salesforce_sales_snapshot.sql", "name": "salesforce_sales_snapshot", "resource_type": "model", "alias": "salesforce_sales_snapshot", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["salesforce_opportunity_enhanced"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.salesforce.salesforce_opportunity_enhanced"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/salesforce_sales_snapshot.sql", "compiled": true, "compiled_sql": "with salesforce_opportunity_enhanced as (\n    \n    select *\n    from `digital-arbor-400`.`dbt_kristin_test`.`salesforce_opportunity_enhanced`\n\n), pipeline as (\n\n  select \n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n\n), bookings as (\n\n  select \n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n\n), lost as (\n\n  select \n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n\n)\n\nselect \n  bookings.*,\n  pipeline.*,\n  lost.*,\n  round((bookings.bookings_amount_closed_this_month / (bookings.bookings_amount_closed_this_month + lost.lost_amount_this_month)) * 100, 2 ) as win_percent_this_month,\n  round((bookings.bookings_amount_closed_this_quarter / (bookings.bookings_amount_closed_this_quarter + lost.lost_amount_this_quarter)) * 100, 2 ) as win_percent_this_quarter,\n  round((bookings.total_bookings_amount / (bookings.total_bookings_amount + lost.total_lost_amount)) * 100, 2) as win_percent_all_time\nfrom bookings, pipeline, lost", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with salesforce_opportunity_enhanced as (\n    \n    select *\n    from `digital-arbor-400`.`dbt_kristin_test`.`salesforce_opportunity_enhanced`\n\n), pipeline as (\n\n  select \n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n\n), bookings as (\n\n  select \n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n\n), lost as (\n\n  select \n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n\n)\n\nselect \n  bookings.*,\n  pipeline.*,\n  lost.*,\n  round((bookings.bookings_amount_closed_this_month / (bookings.bookings_amount_closed_this_month + lost.lost_amount_this_month)) * 100, 2 ) as win_percent_this_month,\n  round((bookings.bookings_amount_closed_this_quarter / (bookings.bookings_amount_closed_this_quarter + lost.lost_amount_this_quarter)) * 100, 2 ) as win_percent_this_quarter,\n  round((bookings.total_bookings_amount / (bookings.total_bookings_amount + lost.total_lost_amount)) * 100, 2) as win_percent_all_time\nfrom bookings, pipeline, lost", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.07561612129211426, "thread_id": "Thread-4", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.378403Z", "completed_at": "2020-05-05T23:24:19.427908Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.428205Z", "completed_at": "2020-05-05T23:24:19.428211Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with opportunity_aggregation_by_owner as (\n    \n    select *\n    from {{ ref('opportunity_aggregation_by_owner') }}\n  \n), user as (\n\n    select *\n    from {{ ref('stg_salesforce_user') }}\n  \n)\n\nselect \n  opportunity_aggregation_by_owner.*,\n\tuser.name as owner_name,\n  user.city as owner_city,\n  user.state as owner_state,\n  case when (bookings_amount_closed_this_month + lost_amount_this_month) > 0 then\n        bookings_amount_closed_this_month / \n          (bookings_amount_closed_this_month + lost_amount_this_month) * 100\n          else 0 end as win_percent_this_month,\n  case when (bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n        bookings_amount_closed_this_quarter / \n          (bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n          else 0 end as win_percent_this_quarter,\n  case when (total_bookings_amount + total_lost_amount) > 0 then \n        total_bookings_amount / (total_bookings_amount + total_lost_amount) * 100\n        else 0 end as total_win_percent\n\nfrom opportunity_aggregation_by_owner\njoin user on user.user_id = opportunity_aggregation_by_owner.owner_id", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "salesforce_owner_performance"], "unique_id": "model.salesforce.salesforce_owner_performance", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "salesforce_owner_performance.sql", "original_file_path": "models/salesforce_owner_performance.sql", "name": "salesforce_owner_performance", "resource_type": "model", "alias": "salesforce_owner_performance", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["opportunity_aggregation_by_owner"], ["stg_salesforce_user"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.salesforce.opportunity_aggregation_by_owner", "model.salesforce.stg_salesforce_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/salesforce_owner_performance.sql", "compiled": true, "compiled_sql": "with opportunity_aggregation_by_owner as (\n    \n    select *\n    from __dbt__CTE__opportunity_aggregation_by_owner\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n)\n\nselect \n  opportunity_aggregation_by_owner.*,\n\tuser.name as owner_name,\n  user.city as owner_city,\n  user.state as owner_state,\n  case when (bookings_amount_closed_this_month + lost_amount_this_month) > 0 then\n        bookings_amount_closed_this_month / \n          (bookings_amount_closed_this_month + lost_amount_this_month) * 100\n          else 0 end as win_percent_this_month,\n  case when (bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n        bookings_amount_closed_this_quarter / \n          (bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n          else 0 end as win_percent_this_quarter,\n  case when (total_bookings_amount + total_lost_amount) > 0 then \n        total_bookings_amount / (total_bookings_amount + total_lost_amount) * 100\n        else 0 end as total_win_percent\n\nfrom opportunity_aggregation_by_owner\njoin user on user.user_id = opportunity_aggregation_by_owner.owner_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_user", "sql": " __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.salesforce.opportunity_aggregation_by_owner", "sql": " __dbt__CTE__opportunity_aggregation_by_owner as (\nwith salesforce_opportunity_enhanced as (\n    \n    select *\n    from `digital-arbor-400`.`dbt_kristin_test`.`salesforce_opportunity_enhanced`\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), booking_by_owner as (\n\n  select \n    opportunity_manager_id as b_manager_id,\n    opportunity_owner_id as b_owner_id,\n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n  group by 1, 2\n\n), lost_by_owner as (\n\n  select \n    opportunity_manager_id as l_manager_id,\n    opportunity_owner_id as l_owner_id,\n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n  group by 1, 2\n\n), pipeline_by_owner as (\n\n  select \n    opportunity_manager_id as p_manager_id,\n    opportunity_owner_id as p_owner_id,\n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n  group by 1, 2\n)\n\nselect \n  user.user_id as owner_id,\n  coalesce(p_manager_id, b_manager_id, l_manager_id) as manager_id,\n  booking_by_owner.*,\n  lost_by_owner.*,\n  pipeline_by_owner.*\nfrom user \nleft join booking_by_owner on booking_by_owner.b_owner_id = user.user_id\nleft join lost_by_owner on lost_by_owner.l_owner_id = user.user_id\nleft join pipeline_by_owner on pipeline_by_owner.p_owner_id = user.user_id\n)"}], "injected_sql": "with  __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__opportunity_aggregation_by_owner as (\nwith salesforce_opportunity_enhanced as (\n    \n    select *\n    from `digital-arbor-400`.`dbt_kristin_test`.`salesforce_opportunity_enhanced`\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), booking_by_owner as (\n\n  select \n    opportunity_manager_id as b_manager_id,\n    opportunity_owner_id as b_owner_id,\n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n  group by 1, 2\n\n), lost_by_owner as (\n\n  select \n    opportunity_manager_id as l_manager_id,\n    opportunity_owner_id as l_owner_id,\n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n  group by 1, 2\n\n), pipeline_by_owner as (\n\n  select \n    opportunity_manager_id as p_manager_id,\n    opportunity_owner_id as p_owner_id,\n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n  group by 1, 2\n)\n\nselect \n  user.user_id as owner_id,\n  coalesce(p_manager_id, b_manager_id, l_manager_id) as manager_id,\n  booking_by_owner.*,\n  lost_by_owner.*,\n  pipeline_by_owner.*\nfrom user \nleft join booking_by_owner on booking_by_owner.b_owner_id = user.user_id\nleft join lost_by_owner on lost_by_owner.l_owner_id = user.user_id\nleft join pipeline_by_owner on pipeline_by_owner.p_owner_id = user.user_id\n),opportunity_aggregation_by_owner as (\n    \n    select *\n    from __dbt__CTE__opportunity_aggregation_by_owner\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n)\n\nselect \n  opportunity_aggregation_by_owner.*,\n\tuser.name as owner_name,\n  user.city as owner_city,\n  user.state as owner_state,\n  case when (bookings_amount_closed_this_month + lost_amount_this_month) > 0 then\n        bookings_amount_closed_this_month / \n          (bookings_amount_closed_this_month + lost_amount_this_month) * 100\n          else 0 end as win_percent_this_month,\n  case when (bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n        bookings_amount_closed_this_quarter / \n          (bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n          else 0 end as win_percent_this_quarter,\n  case when (total_bookings_amount + total_lost_amount) > 0 then \n        total_bookings_amount / (total_bookings_amount + total_lost_amount) * 100\n        else 0 end as total_win_percent\n\nfrom opportunity_aggregation_by_owner\njoin user on user.user_id = opportunity_aggregation_by_owner.owner_id", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.05700182914733887, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.449142Z", "completed_at": "2020-05-05T23:24:19.493394Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.493612Z", "completed_at": "2020-05-05T23:24:19.493618Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with opportunity_aggregation_by_owner as (\n    \n    select *\n    from {{ ref('opportunity_aggregation_by_owner') }}\n  \n), user as (\n\n    select *\n    from {{ ref('stg_salesforce_user') }}\n  \n), user_role as (\n\n    select *\n    from {{ ref('stg_salesforce_user_role') }}\n  \n)\n\nselect \n\n  coalesce(manager.name, 'No Manager Assigned') as manager_name,\n  manager.city as manager_city,\n  manager.state as manager_state,\n  user_role.role_name as manager_position,\n  count(distinct owner_id) as number_of_direct_reports,\n  coalesce(sum(bookings_amount_closed_this_month), 0) as bookings_amount_closed_this_month,\n  coalesce(sum(bookings_amount_closed_this_quarter), 0) as bookings_amount_closed_this_quarter,\n  coalesce(sum(total_number_bookings), 0) as total_number_bookings,\n  coalesce(sum(total_bookings_amount), 0) as total_bookings_amount,\n  coalesce(sum(bookings_count_closed_this_month), 0) as bookings_count_closed_this_month,\n  coalesce(sum(bookings_count_closed_this_quarter), 0) as bookings_count_closed_this_quarter,\n  coalesce(max(largest_booking), 0) as largest_booking,\n  coalesce(sum(lost_amount_this_month), 0) as lost_amount_this_month,\n  coalesce(sum(lost_amount_this_quarter), 0) as lost_amount_this_quarter,\n  coalesce(sum(total_number_lost), 0) as total_number_lost,\n  coalesce(sum(total_lost_amount), 0) as total_lost_amount,\n  coalesce(sum(lost_count_this_month), 0) as lost_count_this_month,\n  coalesce(sum(lost_count_this_quarter), 0) as lost_count_this_quarter,\n  coalesce(sum(pipeline_created_amount_this_month), 0) as pipeline_created_amount_this_month,\n  coalesce(sum(pipeline_created_amount_this_quarter), 0) as pipeline_created_amount_this_quarter,\n  coalesce(sum(pipeline_created_forecast_amount_this_month), 0) as pipeline_created_forecast_amount_this_month,\n  coalesce(sum(pipeline_created_forecast_amount_this_quarter), 0) as pipeline_created_forecast_amount_this_quarter,\n  coalesce(sum(pipeline_count_created_this_month), 0) as pipeline_count_created_this_month,\n  coalesce(sum(pipeline_count_created_this_quarter), 0) as pipeline_count_created_this_quarter,\n  coalesce(sum(total_number_pipeline), 0) as total_number_pipeline,\n  coalesce(sum(total_pipeline_amount), 0) as total_pipeline_amount,\n  coalesce(sum(total_pipeline_forecast_amount), 0) as total_pipeline_forecast_amount,\n  coalesce(max(largest_deal_in_pipeline), 0) as largest_deal_in_pipeline,\n  round(case when sum(bookings_amount_closed_this_month + lost_amount_this_month) > 0 then \n            sum(bookings_amount_closed_this_month) / sum(bookings_amount_closed_this_month + lost_amount_this_month) * 100\n            else 0 end, 2) as win_percent_this_month,\n  round(case when sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n            sum(bookings_amount_closed_this_quarter) / sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n            else 0 end, 2) as win_percent_this_quarter,\n  round(case when sum(total_bookings_amount + total_lost_amount) > 0 then \n            sum(total_bookings_amount) / sum(total_bookings_amount + total_lost_amount) * 100\n            else 0 end, 2) as total_win_percent\n\nfrom opportunity_aggregation_by_owner\nleft join user as manager on manager.user_id = opportunity_aggregation_by_owner.manager_id\nleft join user_role on user_role.user_role_id = manager.user_role_id\ngroup by 1, 2, 3, 4\nhaving number_of_direct_reports > 0", "database": "digital-arbor-400", "schema": "dbt_kristin_test", "fqn": ["salesforce", "salesforce_manager_performance"], "unique_id": "model.salesforce.salesforce_manager_performance", "package_name": "salesforce", "root_path": "/Users/kristin/Documents/Github/dbt_salesforce", "path": "salesforce_manager_performance.sql", "original_file_path": "models/salesforce_manager_performance.sql", "name": "salesforce_manager_performance", "resource_type": "model", "alias": "salesforce_manager_performance", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {"account": "salesforce.account", "opportunity": "salesforce.opportunity", "user_role": "salesforce.user_role", "user": "salesforce.user"}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["opportunity_aggregation_by_owner"], ["stg_salesforce_user"], ["stg_salesforce_user_role"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.salesforce.opportunity_aggregation_by_owner", "model.salesforce.stg_salesforce_user", "model.salesforce.stg_salesforce_user_role"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/salesforce/salesforce_manager_performance.sql", "compiled": true, "compiled_sql": "with opportunity_aggregation_by_owner as (\n    \n    select *\n    from __dbt__CTE__opportunity_aggregation_by_owner\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), user_role as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user_role\n  \n)\n\nselect \n\n  coalesce(manager.name, 'No Manager Assigned') as manager_name,\n  manager.city as manager_city,\n  manager.state as manager_state,\n  user_role.role_name as manager_position,\n  count(distinct owner_id) as number_of_direct_reports,\n  coalesce(sum(bookings_amount_closed_this_month), 0) as bookings_amount_closed_this_month,\n  coalesce(sum(bookings_amount_closed_this_quarter), 0) as bookings_amount_closed_this_quarter,\n  coalesce(sum(total_number_bookings), 0) as total_number_bookings,\n  coalesce(sum(total_bookings_amount), 0) as total_bookings_amount,\n  coalesce(sum(bookings_count_closed_this_month), 0) as bookings_count_closed_this_month,\n  coalesce(sum(bookings_count_closed_this_quarter), 0) as bookings_count_closed_this_quarter,\n  coalesce(max(largest_booking), 0) as largest_booking,\n  coalesce(sum(lost_amount_this_month), 0) as lost_amount_this_month,\n  coalesce(sum(lost_amount_this_quarter), 0) as lost_amount_this_quarter,\n  coalesce(sum(total_number_lost), 0) as total_number_lost,\n  coalesce(sum(total_lost_amount), 0) as total_lost_amount,\n  coalesce(sum(lost_count_this_month), 0) as lost_count_this_month,\n  coalesce(sum(lost_count_this_quarter), 0) as lost_count_this_quarter,\n  coalesce(sum(pipeline_created_amount_this_month), 0) as pipeline_created_amount_this_month,\n  coalesce(sum(pipeline_created_amount_this_quarter), 0) as pipeline_created_amount_this_quarter,\n  coalesce(sum(pipeline_created_forecast_amount_this_month), 0) as pipeline_created_forecast_amount_this_month,\n  coalesce(sum(pipeline_created_forecast_amount_this_quarter), 0) as pipeline_created_forecast_amount_this_quarter,\n  coalesce(sum(pipeline_count_created_this_month), 0) as pipeline_count_created_this_month,\n  coalesce(sum(pipeline_count_created_this_quarter), 0) as pipeline_count_created_this_quarter,\n  coalesce(sum(total_number_pipeline), 0) as total_number_pipeline,\n  coalesce(sum(total_pipeline_amount), 0) as total_pipeline_amount,\n  coalesce(sum(total_pipeline_forecast_amount), 0) as total_pipeline_forecast_amount,\n  coalesce(max(largest_deal_in_pipeline), 0) as largest_deal_in_pipeline,\n  round(case when sum(bookings_amount_closed_this_month + lost_amount_this_month) > 0 then \n            sum(bookings_amount_closed_this_month) / sum(bookings_amount_closed_this_month + lost_amount_this_month) * 100\n            else 0 end, 2) as win_percent_this_month,\n  round(case when sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n            sum(bookings_amount_closed_this_quarter) / sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n            else 0 end, 2) as win_percent_this_quarter,\n  round(case when sum(total_bookings_amount + total_lost_amount) > 0 then \n            sum(total_bookings_amount) / sum(total_bookings_amount + total_lost_amount) * 100\n            else 0 end, 2) as total_win_percent\n\nfrom opportunity_aggregation_by_owner\nleft join user as manager on manager.user_id = opportunity_aggregation_by_owner.manager_id\nleft join user_role on user_role.user_role_id = manager.user_role_id\ngroup by 1, 2, 3, 4\nhaving number_of_direct_reports > 0", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.salesforce.stg_salesforce_user", "sql": " __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n)"}, {"id": "model.salesforce.opportunity_aggregation_by_owner", "sql": " __dbt__CTE__opportunity_aggregation_by_owner as (\nwith salesforce_opportunity_enhanced as (\n    \n    select *\n    from `digital-arbor-400`.`dbt_kristin_test`.`salesforce_opportunity_enhanced`\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), booking_by_owner as (\n\n  select \n    opportunity_manager_id as b_manager_id,\n    opportunity_owner_id as b_owner_id,\n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n  group by 1, 2\n\n), lost_by_owner as (\n\n  select \n    opportunity_manager_id as l_manager_id,\n    opportunity_owner_id as l_owner_id,\n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n  group by 1, 2\n\n), pipeline_by_owner as (\n\n  select \n    opportunity_manager_id as p_manager_id,\n    opportunity_owner_id as p_owner_id,\n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n  group by 1, 2\n)\n\nselect \n  user.user_id as owner_id,\n  coalesce(p_manager_id, b_manager_id, l_manager_id) as manager_id,\n  booking_by_owner.*,\n  lost_by_owner.*,\n  pipeline_by_owner.*\nfrom user \nleft join booking_by_owner on booking_by_owner.b_owner_id = user.user_id\nleft join lost_by_owner on lost_by_owner.l_owner_id = user.user_id\nleft join pipeline_by_owner on pipeline_by_owner.p_owner_id = user.user_id\n)"}, {"id": "model.salesforce.stg_salesforce_user_role", "sql": " __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n)"}], "injected_sql": "with  __dbt__CTE__stg_salesforce_user as (\nwith base as (\n\n    select *\n    from salesforce.user\n\n), fields as (\n\n    select \n      id as user_id,\n      name,\n      city,\n      state,\n      manager_id,\n      user_role_id\n    from base\n\n)\n\nselect *\nfrom fields\n),  __dbt__CTE__opportunity_aggregation_by_owner as (\nwith salesforce_opportunity_enhanced as (\n    \n    select *\n    from `digital-arbor-400`.`dbt_kristin_test`.`salesforce_opportunity_enhanced`\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), booking_by_owner as (\n\n  select \n    opportunity_manager_id as b_manager_id,\n    opportunity_owner_id as b_owner_id,\n    round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n    round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n    count(*) as total_number_bookings,\n    round(sum(amount)) as total_bookings_amount,\n    sum(closed_count_this_month) as bookings_count_closed_this_month,\n    sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n    round(avg(amount)) as avg_bookings_amount,\n    max(amount) as largest_booking,\n    avg(days_to_close) as avg_days_to_close\n  from salesforce_opportunity_enhanced\n  where status = 'Won'\n  group by 1, 2\n\n), lost_by_owner as (\n\n  select \n    opportunity_manager_id as l_manager_id,\n    opportunity_owner_id as l_owner_id,\n    round(sum(closed_amount_this_month)) as lost_amount_this_month,\n    round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n    count(*) as total_number_lost,\n    round(sum(amount)) as total_lost_amount,\n    sum(closed_count_this_month) as lost_count_this_month,\n    sum(closed_count_this_quarter) as lost_count_this_quarter\n  from salesforce_opportunity_enhanced\n  where status = 'Lost'\n  group by 1, 2\n\n), pipeline_by_owner as (\n\n  select \n    opportunity_manager_id as p_manager_id,\n    opportunity_owner_id as p_owner_id,\n    round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n    round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n    round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n    round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n    sum(created_count_this_month) as pipeline_count_created_this_month,\n    sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n    count(*) as total_number_pipeline,\n    round(sum(amount)) as total_pipeline_amount,\n    round(sum(amount * probability)) as total_pipeline_forecast_amount,\n    round(avg(amount)) as avg_pipeline_opp_amount,\n    max(amount) as largest_deal_in_pipeline,\n    avg(days_since_created) as avg_days_open\n  from salesforce_opportunity_enhanced\n  where status = 'Pipeline'\n  group by 1, 2\n)\n\nselect \n  user.user_id as owner_id,\n  coalesce(p_manager_id, b_manager_id, l_manager_id) as manager_id,\n  booking_by_owner.*,\n  lost_by_owner.*,\n  pipeline_by_owner.*\nfrom user \nleft join booking_by_owner on booking_by_owner.b_owner_id = user.user_id\nleft join lost_by_owner on lost_by_owner.l_owner_id = user.user_id\nleft join pipeline_by_owner on pipeline_by_owner.p_owner_id = user.user_id\n),  __dbt__CTE__stg_salesforce_user_role as (\nwith base as (\n\n    select *\n    from salesforce.user_role\n    where not _fivetran_deleted\n\n), fields as (\n\n    select \n\n      id as user_role_id,\n      name as role_name\n\n    from base\n\n)\n\nselect *\nfrom fields\n),opportunity_aggregation_by_owner as (\n    \n    select *\n    from __dbt__CTE__opportunity_aggregation_by_owner\n  \n), user as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user\n  \n), user_role as (\n\n    select *\n    from __dbt__CTE__stg_salesforce_user_role\n  \n)\n\nselect \n\n  coalesce(manager.name, 'No Manager Assigned') as manager_name,\n  manager.city as manager_city,\n  manager.state as manager_state,\n  user_role.role_name as manager_position,\n  count(distinct owner_id) as number_of_direct_reports,\n  coalesce(sum(bookings_amount_closed_this_month), 0) as bookings_amount_closed_this_month,\n  coalesce(sum(bookings_amount_closed_this_quarter), 0) as bookings_amount_closed_this_quarter,\n  coalesce(sum(total_number_bookings), 0) as total_number_bookings,\n  coalesce(sum(total_bookings_amount), 0) as total_bookings_amount,\n  coalesce(sum(bookings_count_closed_this_month), 0) as bookings_count_closed_this_month,\n  coalesce(sum(bookings_count_closed_this_quarter), 0) as bookings_count_closed_this_quarter,\n  coalesce(max(largest_booking), 0) as largest_booking,\n  coalesce(sum(lost_amount_this_month), 0) as lost_amount_this_month,\n  coalesce(sum(lost_amount_this_quarter), 0) as lost_amount_this_quarter,\n  coalesce(sum(total_number_lost), 0) as total_number_lost,\n  coalesce(sum(total_lost_amount), 0) as total_lost_amount,\n  coalesce(sum(lost_count_this_month), 0) as lost_count_this_month,\n  coalesce(sum(lost_count_this_quarter), 0) as lost_count_this_quarter,\n  coalesce(sum(pipeline_created_amount_this_month), 0) as pipeline_created_amount_this_month,\n  coalesce(sum(pipeline_created_amount_this_quarter), 0) as pipeline_created_amount_this_quarter,\n  coalesce(sum(pipeline_created_forecast_amount_this_month), 0) as pipeline_created_forecast_amount_this_month,\n  coalesce(sum(pipeline_created_forecast_amount_this_quarter), 0) as pipeline_created_forecast_amount_this_quarter,\n  coalesce(sum(pipeline_count_created_this_month), 0) as pipeline_count_created_this_month,\n  coalesce(sum(pipeline_count_created_this_quarter), 0) as pipeline_count_created_this_quarter,\n  coalesce(sum(total_number_pipeline), 0) as total_number_pipeline,\n  coalesce(sum(total_pipeline_amount), 0) as total_pipeline_amount,\n  coalesce(sum(total_pipeline_forecast_amount), 0) as total_pipeline_forecast_amount,\n  coalesce(max(largest_deal_in_pipeline), 0) as largest_deal_in_pipeline,\n  round(case when sum(bookings_amount_closed_this_month + lost_amount_this_month) > 0 then \n            sum(bookings_amount_closed_this_month) / sum(bookings_amount_closed_this_month + lost_amount_this_month) * 100\n            else 0 end, 2) as win_percent_this_month,\n  round(case when sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n            sum(bookings_amount_closed_this_quarter) / sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n            else 0 end, 2) as win_percent_this_quarter,\n  round(case when sum(total_bookings_amount + total_lost_amount) > 0 then \n            sum(total_bookings_amount) / sum(total_bookings_amount + total_lost_amount) * 100\n            else 0 end, 2) as total_win_percent\n\nfrom opportunity_aggregation_by_owner\nleft join user as manager on manager.user_id = opportunity_aggregation_by_owner.manager_id\nleft join user_role on user_role.user_role_id = manager.user_role_id\ngroup by 1, 2, 3, 4\nhaving number_of_direct_reports > 0", "wrapped_sql": null}, "error": null, "status": null, "execution_time": 0.06494283676147461, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-05-05T23:24:19.430186Z", "completed_at": "2020-05-05T23:24:19.494224Z"}, {"name": "execute", "started_at": "2020-05-05T23:24:19.494419Z", "completed_at": "2020-05-05T23:24:19.494423Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-05-05T23:24:19.518253Z", "elapsed_time": 0.33875298500061035}